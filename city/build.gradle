plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.8'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
}

//repositories {
//    mavenCentral()
//}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/" }
    mavenLocal()
}

allprojects {
    apply plugin: 'java'
}

def grpcVersion = '1.21.0' // CURRENT_GRPC_VERSION
def protobufVersion = '3.7.1'
def protocVersion = protobufVersion

allprojects {
    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.12'
        compile group: 'io.netty', name: 'netty-all', version: '4.1.31.Final'
        //compile 'com.google.protobuf:protobuf-java:3.6.1'
        compile 'com.google.protobuf:protobuf-java:2.5.0'

        compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.0'
        //compile group: 'com.rabbitmq', name: 'amqp-client', version: '5.3.0'
        compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.8.0'
        compile group: 'log4j', name: 'log4j', version: '1.2.17'
        compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'
        compile group: 'com.google.guava', name: 'guava', version: '26.0-jre'
        compile group: 'org.hibernate', name: 'hibernate-core', version: '5.3.6.Final'
        compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
        compile 'com.vladmihalcea:hibernate-types-52:2.3.0'

        compile 'io.grpc:grpc-netty-shaded:1.21.0'
        compile 'io.grpc:grpc-protobuf:1.21.0'
        compile 'io.grpc:grpc-stub:1.21.0'
        //
    }
    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"

    //compileJava.options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

group 'info.scry'
//version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

project(':as') {
    dependencies {
        compile project(':Shared')
    }
}

project(':gs') {
    dependencies {
        compile project(':Shared')
        implementation "io.grpc:grpc-protobuf:${grpcVersion}"
        implementation "io.grpc:grpc-stub:${grpcVersion}"
        compileOnly "javax.annotation:javax.annotation-api:1.2"
        implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"
        runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"
        testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    }
}

project(':ss') {
    dependencies {
        compile project(':Shared')
    }
}

jar {
    baseName = 'libs'
    //version='0.0.1'
    from configurations.compile.collect{it.isDirectory()?it:zipTree(it)}
    //from configurations.runtime.collect{zipTree(it)}
}
task myCopyTask(type: Copy) {
    dependsOn jar
    from "build/libs/libs.jar"
    into "../../server_bin"
}
assemble.dependsOn myCopyTask


protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

startScripts.enabled = false

task helloWorldServer(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.helloworld.HelloWorldServer'
    applicationName = 'hello-world-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task helloWorldClient(type: CreateStartScripts) {
    mainClassName = 'io.grpc.examples.helloworld.HelloWorldClient'
    applicationName = 'hello-world-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    //from(routeGuideServer)
    //from(routeGuideClient)
    from(helloWorldServer)
    from(helloWorldClient)
    //from(compressingHelloWorldClient)
    fileMode = 0755
}